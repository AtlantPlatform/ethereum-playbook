diff --git a/vendor/github.com/ethereum/go-ethereum/accounts/abi/abi.go b/vendor/github.com/ethereum/go-ethereum/accounts/abi/abi.go
index 535e5d7..040ac0f 100644
--- a/vendor/github.com/ethereum/go-ethereum/accounts/abi/abi.go
+++ b/vendor/github.com/ethereum/go-ethereum/accounts/abi/abi.go
@@ -82,6 +82,9 @@ func (abi ABI) Unpack(v interface{}, name string, output []byte) (err error) {
 	// we need to decide whether we're calling a method or an event
 	if method, ok := abi.Methods[name]; ok {
 		if len(output)%32 != 0 {
+			if msg := getMessage(output); len(msg) > 0 {
+				return fmt.Errorf("abi: thrown message: %s", msg)
+			}
 			return fmt.Errorf("abi: improperly formatted output")
 		}
 		return method.Outputs.Unpack(v, output)
@@ -91,6 +94,29 @@ func (abi ABI) Unpack(v interface{}, name string, output []byte) (err error) {
 	return fmt.Errorf("abi: could not locate named method or event")
 }
 
+func getMessage(data []byte) []byte {
+	var inMessage bool
+	var message []byte
+	offset := bytes.IndexByte(data, 0x20)
+	if offset < 0 || offset >= len(data)-1 {
+		return nil
+	}
+	for i := offset + 1; i < len(data); i++ {
+		if !inMessage && data[i] != 0x00 {
+			inMessage = true
+			if data[i] != 0x4e && data[i] != 0x1a {
+				message = append(message, data[i])
+			}
+		} else if inMessage {
+			if data[i] == 0x00 {
+				return bytes.TrimSpace(message)
+			}
+			message = append(message, data[i])
+		}
+	}
+	return bytes.TrimSpace(message)
+}
+
 // UnmarshalJSON implements json.Unmarshaler interface
 func (abi *ABI) UnmarshalJSON(data []byte) error {
 	var fields []struct {
